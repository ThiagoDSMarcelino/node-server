generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String       @id
  email          String       @unique
  profilePicture String?      @map("profile_picture")
  password       String
  cpf            String       @unique
  birthday       DateTime
  firstName      String       @map("first_name")
  isAdmin        Boolean      @default(false) @map("is_admin")
  lastName       String?      @map("last_name")
  cards          CreditCard[]
  purchases      Purchase[]
}

model Hotel {
  id    Int    @id @default(autoincrement())
  name  String @unique
  phone String @unique
  email String @unique
  cnpj  String @unique
  rooms Room[]
}

model Room {
  id        Int       @id @default(autoincrement())
  doubleBed Int       @map("double_bed")
  singleBed Int       @map("single_bed")
  daily     Decimal
  hotelId   Int       @map("hotel_id")
  name      String    @unique
  packages  Package[]
  hotel     Hotel     @relation(fields: [hotelId], references: [id])
}

model CreditCard {
  id         Int      @id @default(autoincrement())
  number     String
  holder     String
  code       String
  expiration DateTime
  userId     String   @map("user_id")
  user       User     @relation(fields: [userId], references: [id])
}

model TransportType {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  tickets Ticket[]
}

model Class {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  tickets Ticket[]

  @@map("TravelClass")
}

model Ticket {
  id                Int           @id @default(autoincrement())
  price             Decimal
  classId           Int           @map("class_id")
  arrivalAddress    String        @map("arrival_address")
  arrivalDateTime   DateTime      @map("arrival_date_time")
  departureDateTime DateTime      @map("departure_date_time")
  derpartureAddress String        @map("derparture_address")
  transportTypeId   Int           @map("transport_type_id")
  arrivels          Package[]     @relation("arrivel_ticket")
  derpartures       Package[]     @relation("departure_ticket")
  class             Class         @relation(fields: [classId], references: [id])
  transportType     TransportType @relation(fields: [transportTypeId], references: [id])
}

model Package {
  id                Int        @id @default(autoincrement())
  name              String     @unique
  description       String
  discount          Decimal
  arrivelTicketId   Int        @map("arrivel_ticket_id")
  departureTicketId Int        @map("departure_ticket_id")
  roomId            Int        @map("room_id")
  arrivelTicket     Ticket     @relation("arrivel_ticket", fields: [arrivelTicketId], references: [id])
  departureTicket   Ticket     @relation("departure_ticket", fields: [departureTicketId], references: [id])
  room              Room       @relation(fields: [roomId], references: [id])
  images            Image[]
  purchases         Purchase[]
}

model Image {
  id        Int     @id @default(autoincrement())
  url       String
  packageId Int     @map("package_id")
  package   Package @relation(fields: [packageId], references: [id])

  @@map("PackageImage")
}

model Status {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  purchases Purchase[]

  @@map("PurchaseStatus")
}

model Purchase {
  id        Int      @id @default(autoincrement())
  userId    String   @map("user_id")
  packageId Int      @map("package_id")
  value     Decimal
  date      DateTime
  statusId  Int      @map("status_id")
  package   Package  @relation(fields: [packageId], references: [id])
  status    Status   @relation(fields: [statusId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

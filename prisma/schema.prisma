generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Address {
  id           Int          @id @default(autoincrement())
  street       String
  number       String
  complement   String?
  neighborhood String
  city         String
  state        String
  country      String
  postal_code  String
  airports     Airport[]
  credit_cards CreditCard[]
  hotels       Hotel[]
  users        User[]
}

model User {
  id              String       @id
  email           String       @unique
  profile_picture String?
  password        String
  cpf             String       @unique
  birthday        DateTime
  address_id      Int?
  first_name      String
  is_admin        Boolean      @default(false)
  last_name       String?
  credit_cards    CreditCard[]
  purchase        Purchase[]
  address         Address?     @relation(fields: [address_id], references: [id])
}

model Airport {
  id         Int      @id @default(autoincrement())
  name       String   @unique
  address_id Int
  address    Address  @relation(fields: [address_id], references: [id])
  travels    Travel[]
}

model Hotel {
  id         Int           @id @default(autoincrement())
  name       String        @unique
  phone      String        @unique
  email      String        @unique
  cnpj       String        @unique
  address_id Int
  address    Address       @relation(fields: [address_id], references: [id])
  images     HotelImages[]
  packages   Package[]
  rooms      Room[]
}

model HotelImages {
  id       Int    @id @default(autoincrement())
  url      String
  hotel_id Int
  hotel    Hotel  @relation(fields: [hotel_id], references: [id])
}

model Room {
  id         Int     @id @default(autoincrement())
  double_bed Int
  single_bed Int
  daily      Decimal
  hotel_id   Int
  hotel      Hotel   @relation(fields: [hotel_id], references: [id])
}

model CreditCard {
  id         Int      @id @default(autoincrement())
  number     String
  holder     String
  code       String
  expiration DateTime
  user_id    String
  address_id Int
  address    Address  @relation(fields: [address_id], references: [id])
  user       User     @relation(fields: [user_id], references: [id])
}

model TransportTypes {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  travels Travel[]
}

model Travel {
  id                Int            @id @default(autoincrement())
  number            String
  departure         DateTime
  arrival           DateTime
  Capacity          Int
  airport_id        Int
  transport_type_id Int
  arrivels          Ticket[]       @relation("arrival_travel")
  departures        Ticket[]       @relation("departure_travel")
  airport           Airport        @relation(fields: [airport_id], references: [id])
  transport_type    TransportTypes @relation(fields: [transport_type_id], references: [id])
}

model TravelClass {
  id     Int      @id @default(autoincrement())
  name   String   @unique
  Ticket Ticket[]
}

model Ticket {
  id                       Int                      @id @default(autoincrement())
  price                    Decimal
  departure_travel_id      Int
  arrival_travel_id        Int
  travel_class_id          Int
  package_arrivel_ticket   PackageArrivelTicket[]
  package_departure_ticket PackageDepartureTicket[]
  arrival_travel           Travel                   @relation("arrival_travel", fields: [arrival_travel_id], references: [id])
  departure_travel         Travel                   @relation("departure_travel", fields: [departure_travel_id], references: [id])
  travel_class             TravelClass              @relation(fields: [travel_class_id], references: [id])
}

model Package {
  id                       Int                      @id @default(autoincrement())
  name                     String                   @unique
  description              String
  hotel_id                 Int
  discount                 Decimal
  hotel                    Hotel                    @relation(fields: [hotel_id], references: [id])
  package_arrivel_ticket   PackageArrivelTicket[]
  package_departure_ticket PackageDepartureTicket[]
  Purchase                 Purchase[]
}

model PackageDepartureTicket {
  id         Int     @id @default(autoincrement())
  package_id Int
  ticket_id  Int
  package    Package @relation(fields: [package_id], references: [id])
  ticket     Ticket  @relation(fields: [ticket_id], references: [id])
}

model PackageArrivelTicket {
  id         Int     @id @default(autoincrement())
  package_id Int
  ticket_id  Int
  package    Package @relation(fields: [package_id], references: [id])
  ticket     Ticket  @relation(fields: [ticket_id], references: [id])
}

model PurchaseStatus {
  id       Int        @id @default(autoincrement())
  name     String     @unique
  purchase Purchase[]
}

model Purchase {
  id         Int            @id @default(autoincrement())
  user_id    String
  package_id Int
  value      Decimal
  date       DateTime
  status_id  Int
  package    Package        @relation(fields: [package_id], references: [id])
  status     PurchaseStatus @relation(fields: [status_id], references: [id])
  user       User           @relation(fields: [user_id], references: [id])
}
